## -*- mode: python; coding: utf-8 -*-

DESCRIPTION="DMF End-to-End Network Performance"
AGGREGATOR='timeseries'
STEP_SIZE=0.1
SOCKET_STATS=True
IP_VERSION=4
SEGLEN=120
TOTAL_LENGTH=8*SEGLEN

DEFAULTS={'PLOT': 'all_plots'}

DATA_SETS = o([
        ('UDP ping',
         {'host': HOST, 'interval': STEP_SIZE, 'delay': 0, 'length': 8*SEGLEN,
          'irtt_send_interval': 0.01, 'irtt_packet_length': 100,
          'units': 'Kbps', 'runner': 'udp'}),

        ('TCP download1 cubic',
         {'host': HOST, 'test': 'TCP_MAERTS', 'delay': SEGLEN, 'length': SEGLEN,
          'cong_control': 'cubic',
          'units': 'Mbps', 'runner': 'netperf_demo'}),

        ('TCP download1 bbrv1',
         {'host': HOST, 'test': 'TCP_MAERTS', 'delay': 2*SEGLEN, 'length': SEGLEN,
          'cong_control': 'bbr',
          'units': 'Mbps', 'runner': 'netperf_demo'}),

        ('TCP upload1 cubic',
         {'host': HOST, 'test': 'TCP_STREAM', 'delay': 3*SEGLEN, 'length': SEGLEN,
          'cong_control': 'cubic',
          'units': 'Mbps', 'runner': 'netperf_demo'}),

        ('UDP video',
         {'host': HOST, 'interval': STEP_SIZE, 'delay': 4*SEGLEN, 'length': 4*SEGLEN,
          'irtt_send_interval': 0.0016, 'irtt_packet_length': 1000,
          'units': 'Kbps', 'runner': 'udp'}),

        ('TCP download2 cubic',
         {'host': HOST, 'test': 'TCP_MAERTS', 'delay': 5*SEGLEN, 'length': SEGLEN,
          'cong_control': 'cubic',
          'units': 'Mbps', 'runner': 'netperf_demo'}),

        ('TCP download2 bbrv1',
         {'host': HOST, 'test': 'TCP_MAERTS', 'delay': 6*SEGLEN, 'length': SEGLEN,
          'cong_control': 'bbr',
          'units': 'Mbps', 'runner': 'netperf_demo'}),

        ('TCP upload2 cubic',
         {'host': HOST, 'test': 'TCP_STREAM', 'delay': 7*SEGLEN, 'length': SEGLEN,
          'cong_control': 'cubic',
          'units': 'Mbps', 'runner': 'netperf_demo'}),

        ('UDP ping::rtt',
         {'units': 'ms', 'runner': 'null'}),

        ('UDP ping::loss',
         {'units': 'count', 'runner': 'null'}),

        ('UDP ping::loss_up',
         {'units': 'count', 'runner': 'null'}),

        ('UDP ping::loss_down',
         {'units': 'count', 'runner': 'null'}),

        ('UDP ping::ipdv',
         {'units': 'ms', 'runner': 'null'}),

        ('UDP ping::ipdv_up',
         {'units': 'ms', 'runner': 'null'}),

        ('UDP ping::ipdv_down',
         {'units': 'ms', 'runner': 'null'}),

        ('TCP download1 cubic::tcp_rtt',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download1 cubic::tcp_lost',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download1 cubic::tcp_dsegsout',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download1 cubic::tcp_retranst',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download1 bbrv1::tcp_rtt',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download1 bbrv1::tcp_lost',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download1 bbrv1::tcp_dsegsout',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download1 bbrv1::tcp_retranst',
         {'units': 'count', 'runner': 'null'}),

        ('TCP upload1 cubic::tcp_rtt',
         {'units': 'count', 'runner': 'null'}),

        ('TCP upload1 cubic::tcp_lost',
         {'units': 'count', 'runner': 'null'}),

        ('TCP upload1 cubic::tcp_dsegsout',
         {'units': 'count', 'runner': 'null'}),

        ('TCP upload1 cubic::tcp_retranst',
         {'units': 'count', 'runner': 'null'}),

        ('UDP video::rtt',
         {'units': 'ms', 'runner': 'null'}),

        ('UDP video::loss',
         {'units': 'count', 'runner': 'null'}),

        ('UDP video::loss_up',
         {'units': 'count', 'runner': 'null'}),

        ('UDP video::loss_down',
         {'units': 'count', 'runner': 'null'}),

        ('UDP video::ipdv',
         {'units': 'ms', 'runner': 'null'}),

        ('UDP video::ipdv_up',
         {'units': 'ms', 'runner': 'null'}),

        ('UDP video::ipdv_down',
         {'units': 'ms', 'runner': 'null'}),

        ('TCP download2 cubic::tcp_rtt',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download2 cubic::tcp_lost',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download2 cubic::tcp_dsegsout',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download2 cubic::tcp_retranst',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download2 bbrv1::tcp_rtt',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download2 bbrv1::tcp_lost',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download2 bbrv1::tcp_dsegsout',
         {'units': 'count', 'runner': 'null'}),

        ('TCP download2 bbrv1::tcp_retranst',
         {'units': 'count', 'runner': 'null'}),

        ('TCP upload2 cubic::tcp_rtt',
         {'units': 'count', 'runner': 'null'}),

        ('TCP upload2 cubic::tcp_lost',
         {'units': 'count', 'runner': 'null'}),

        ('TCP upload2 cubic::tcp_dsegsout',
         {'units': 'count', 'runner': 'null'}),

        ('TCP upload2 cubic::tcp_retranst',
         {'units': 'count', 'runner': 'null'}),

#      ('qdisc-stats',
#       {'interface': TEST_PARAMETERS.get('interface'), 'interval': STEP_SIZE,
#        'length': TOTAL_LENGTH, 'units': 'ms', 'runner': 'tc'}),
#
#      ('qdisc-stats::sent_pkts',
#       {'units': 'count', 'runner': 'null'}),

        ])

PLOTS = o([
    ('tcp_throughput',
     {'description': 'TCP Throughput',
      'type': 'timeseries',
      'series': [
                 {'data': glob('TCP *'),
#                  'raw_key': 'val',
                  'label': 'Throughput'}
                ]}),

    ('tcp_rtt',
     {'description': 'TCP RTT',
             'type': 'timeseries',
      'axis_labels': ['ms'],
           'series': [
                      {'data': glob('TCP *::tcp_rtt'),
#                       'raw_key': 'tcp_rtt',
                       'label': 'RTT'}
                     ]}),

    ('tcp_lost',
     {'description': 'TCP Packets Lost',
      'type': 'timeseries',
      'axis_labels': ['packets'],
      'series': [
                 {'data': glob('TCP *::tcp_lost'),
#                  'raw_key': 'tcp_lost',
                  'label': 'Packets Lost'}
                ]}),

    ('tcp_dsegsout',
     {'description': 'TCP Total Data Packets Sent',
      'type': 'timeseries',
      'axis_labels': ['packets'],
      'series': [
                 {'data': glob('TCP *::tcp_dsegsout'),
#                  'raw_key': 'tcp_dsegsout',
                  'label': 'Data Pkts Sent'}
                ]}),

    ('tcp_retrans',
     {'description': 'TCP Total Packets Retransmitted',
      'type': 'timeseries',
      'axis_labels': ['packets'],
      'series': [
                 {'data': glob('TCP *::tcp_retranst'),
#                  'raw_key': 'tcp_retranst',
                  'label': 'Retransmitted'}
                ]}),

    ('udp_rtt',
     {'description': 'UDP RTT',
             'type': 'timeseries',
      'axis_labels': ['ms'],
           'series': [
                      {'data': glob('UDP *::rtt'),
#                       'raw_key': 'rtt',
                       'label': 'RTT'}
                     ]}),

    ('udp_ipdv',
     {'description': 'UDP IPDV',
             'type': 'timeseries',
      'axis_labels': ['ms'],
           'series': [
                      {'data': glob('UDP *::ipdv_down'),
#                       'raw_key': 'ipdv_down',
                       'label': 'IPDV down'},
                      {'data': glob('UDP *::ipdv_up'),
#                       'raw_key': 'ipdv_up',
                       'label': 'IPDV up'},
                     ]}),

    ('udp_loss',
     {'description': 'UDP packet loss',
             'type': 'timeseries',
      'axis_labels': ['packets'],
           'series': [
                      {'data': glob('UDP *::loss_up'),
#                       'raw_key': 'loss_up',
                       'label': 'Packet Loss (up)'},
                      {'data': glob('UDP *::loss_down'),
#                       'raw_key': 'loss_down',
                       'label': 'Packet Loss (down)'},
                      {'data': glob('UDP *::loss'),
#                       'raw_key': 'loss',
                       'label': 'Packet Loss (round trip)'},
                     ]}),

#   ('interface_sent',
#    {'description': 'NIC Total Packets Sent',
#     'type': 'timeseries',
#     'axis_labels': ['packets'],
#     'series': [
#                {'data': 'qdisc-stats::sent_pkts',
#                 'label': 'NIC Total Packets Sent (upload)'},
#               ]}),

    ('all_plots',
     {'description': 'UDP video is 1000B/pkt, 625pps, 5Mbps',
             'type': 'meta',
         'subplots': ('tcp_throughput', 'tcp_rtt', 'tcp_lost', 'tcp_dsegsout', 'tcp_retrans', 'udp_rtt', 'udp_ipdv', 'udp_loss')})

    ])

#include("common.inc")

